const Appointment = require("../models/Appointment");

// üìå Cr√©er un rendez-vous (Seul un 'user' peut cr√©er un RDV)
const createAppointment = async (req, res) => {
    console.log('eto');
    if (req.user.role !== 'user') {
        return res.status(403).json({ message: "Acc√®s refus√©. Seuls les utilisateurs peuvent cr√©er un rendez-vous." });
    }

    try {
        const { carModel, licensePlate, serviceType, appointmentDate } = req.body;
        const newAppointment = new Appointment({
            customerName: req.user.name,
            carModel,
            licensePlate,
            serviceType,
            appointmentDate,
            status: "pending" // En attente de validation par un admin
        });

        await newAppointment.save();
        res.status(201).json(newAppointment);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå Valider un rendez-vous (Seul un admin peut passer de pending √† scheduled)
const validateAppointment = async (req, res) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Seul un admin peut valider un rendez-vous." });
    }

    try {
        const appointment = await Appointment.findById(req.params.id);
        if (!appointment) return res.status(404).json({ message: "Rendez-vous non trouv√©" });

        if (appointment.status !== "pending") {
            return res.status(400).json({ message: "Ce rendez-vous a d√©j√† √©t√© valid√©." });
        }

        appointment.status = "scheduled";
        await appointment.save();

        res.status(200).json({ message: "Rendez-vous valid√©.", appointment });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå Confirmer un rendez-vous (Seul un m√©canicien peut passer de scheduled √† in-progress)
const confirmAppointment = async (req, res) => {
    if (req.user.role !== 'mechanic') {
        return res.status(403).json({ message: "Seul un m√©canicien peut confirmer un rendez-vous." });
    }

    try {
        const appointment = await Appointment.findById(req.params.id);
        if (!appointment) return res.status(404).json({ message: "Rendez-vous non trouv√©" });

        if (appointment.status !== "scheduled") {
            return res.status(400).json({ message: "Seuls les rendez-vous valid√©s peuvent √™tre confirm√©s." });
        }

        appointment.status = "in-progress";
        await appointment.save();

        res.status(200).json({ message: "Rendez-vous confirm√© par le m√©canicien.", appointment });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå Finaliser un rendez-vous (Le m√©canicien passe de in-progress √† completed)
const completeAppointment = async (req, res) => {
    if (req.user.role !== 'mechanic') {
        return res.status(403).json({ message: "Seul un m√©canicien peut terminer un rendez-vous." });
    }

    try {
        const appointment = await Appointment.findById(req.params.id);
        if (!appointment) return res.status(404).json({ message: "Rendez-vous non trouv√©" });

        if (appointment.status !== "in-progress") {
            return res.status(400).json({ message: "Seuls les rendez-vous en cours peuvent √™tre finalis√©s." });
        }

        appointment.status = "completed";
        await appointment.save();

        res.status(200).json({ message: "Rendez-vous termin√©.", appointment });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå Suppression d'un rendez-vous (Client peut annuler uniquement si status = scheduled)
const deleteAppointment = async (req, res) => {
    try {
        const appointment = await Appointment.findById(req.params.id);
        if (!appointment) return res.status(404).json({ message: "Rendez-vous non trouv√©" });

        if (req.user.role === 'user' && appointment.status !== 'scheduled') {
            return res.status(403).json({ message: "Vous ne pouvez annuler que les rendez-vous en attente." });
        }

        if (req.user.role !== 'admin' && req.user.role !== 'user') {
            return res.status(403).json({ message: "Seuls un admin ou le client peuvent annuler un rendez-vous." });
        }

        await Appointment.findByIdAndDelete(req.params.id);
        res.status(200).json({ message: "Rendez-vous annul√©." });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå R√©cup√©rer tous les rendez-vous (Admin uniquement)
const getAppointments = async (req, res) => {
    try {
        const appointments = await Appointment.find();
        res.status(200).json(appointments);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå R√©cup√©rer un rendez-vous sp√©cifique (Client = propres RDV, M√©canicien = assign√©s, Admin = tout)
const getAppointmentById = async (req, res) => {
    try {
        const appointment = await Appointment.findById(req.params.id);
        if (!appointment) return res.status(404).json({ message: "Rendez-vous non trouv√©" });

        if (req.user.role === 'user' && appointment.customerName !== req.user.name) {
            return res.status(403).json({ message: "Acc√®s refus√©." });
        }

        res.status(200).json(appointment);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

module.exports = {
    createAppointment,
    validateAppointment,
    confirmAppointment,
    completeAppointment,
    deleteAppointment,
    getAppointments,
    getAppointmentById
};
